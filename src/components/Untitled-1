 if (this.dragging) {
          let newPosition = this.data.getLocalPosition(this.parent)
          this.x = newPosition.x
          this.y = newPosition.y
          let endPos = this.data.getLocalPosition(this.parent), minArr = [], resultArr = [], equalArr = []
          let onMoveing, curIndex;
           onMoveing = that.planeList.findIndex(item => {
            return item.pName == this.pName
          })
          curIndex = DetectValid(endPos.x,endPos.y,50,onMoveing);
          console.log(`%c ${curIndex}`,'color:deeppink');

          
          if (onMoveing != curIndex && that.boxList[curIndex].rank == this.pRank) {  // 飞机级别一样
            let rk = that.boxList[curIndex].rank, obj2 = that.boxList[onMoveing]
            obj2.rank = 0
            that.createHighlight(curIndex, equalArr)
            that.planeList[onMoveing].destroy()
            that.planeList[curIndex].destroy()
            Vue.set(that.planeList, onMoveing, {})
            that.$set(that.boxList[onMoveing],'occupied',false);
            that.$set(that.boxList[onMoveing], 'rank', 0)
            clearInterval(that.clearTime)
            that.spillAction(100, 100, that.boxList[curIndex].x, that.boxList[curIndex].y, [CONFIG.circleUrl, CONFIG.starUrl], CONFIG.composeEmitterConfig)
            // setTimeout(() => {
              if (rk + 1 == 5) { // 最高级
                that.grade = rk + 1
                that.winSuccess(that.grade)
                that.rankBox.push(that.grade)
              } else {
                if (rk + 1 < that.grade) {  
                  that.createPlane(rk + 1, curIndex)
                  that.cycleFuc()
                } else if (rk + 1 == that.grade){
                  let n = that.rankBox.findIndex(item => {
                    return item == that.grade
                  }) 
                  if (n > -1) {
                    that.createPlane(rk + 1, curIndex)
                    that.cycleFuc()
                    return
                  } else {
                    that.passResult(that.grade, curIndex)
                  }
                } else {
                  that.grade = rk + 1
                  that.rankBox.push(that.grade)
                  that.passResult(that.grade, curIndex)
                }
              }
              that.app1.stage.removeChild(that.container1)
            // }, 500)
            
            
          } else {
            let planeObj2 = that.planeList[onMoveing]
            console.log(planeObj2.x)
            planeObj2.x = that.oldPosition.x
            planeObj2.y = that.oldPosition.y
            console.log(planeObj2.x)
            //Vue.set(that.planeList[onMoveing], x, that.oldPosition.x)
            Vue.set(that.planeList, onMoveing, planeObj2)
            return
          }
        }
        this.dragging = false
        this.data = null